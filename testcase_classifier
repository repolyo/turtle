#!/bin/sh

# Initialize variables
outpath=tests
ret=1
run_test=1
pages=-1
config="test"
type="*"
dir="/pfv/.firmwaretestcebu/pdf/v1_2"
input_filter=""
out_filter=""

if [ -z "$1" ]; then
  module=v1_2
else
  module=$1
fi


# const char * program_name
# int exit_status
help ()
{
   echo "Test case document classifier and unit test automation tool.";
   echo "Input directory will be scanned and filtered based on the given key filter string.";

   echo " Usage: ";
   echo "   Normal:          $0 [options] <filePath/testcase";
   echo "";
   echo " Options:";
   echo "    -d, --dir";
   echo "        intput testcase directory.";
   echo "    -p, --pdls";
   echo "        pdls test directory path.";
   echo "    -t, --type";
   echo "        document type to filter.";
   echo "    -c, --conf";
   echo "        config name";
   echo "    -s, --search";
   echo "        input search keyword";
   echo "    -f, --filter";
   echo "        output file search keyword";
   echo "    -n, --pages";
   echo "        number of pages to test";
   echo "";
   exit 0
}

filter_file()
{
  file=$1
  search=$2
  contains=0
  data=`grep -rl  $search $file`
  if [ ${#data} -gt 0 ]; then
    contains=1
  fi
          
  #if grep -q $search "$file"; then
  #  contains=1
  #fi
  
  echo "filtering $file for $search, result is: $contains"
  
  return $contains
}


# parse output log for checksum
# $1 - log file
parse_checksum()
{
    err=0
    logfile=$1
    pdffile=$2
    cksum=""
    echo "parse_checksum: $logfile $pdffile"
    rm -f $logfile.cksum
    
    if [ -f "$logfile" ]; then
      while read -r line
      do
          #z="${line##*1-bit jpg2k image*}"
          #if [ ${#line} -ne ${#z} ]; then
          #  echo "================= 1-bit image dected, copying to /users/chritan/testcases/jpg2k/1-bit/$module/`basename $3` "
          #fi
          
          a="${line##FATAL ERROR*}"
          if [ ${#line} -ne ${#a} ]; then
            #cksum+=" skip # $logfile"
            cksum=""
            err=1
            break
          fi
          
          b="${line##Page [0-50] checksum is:}"
          if [ ${#line} -ne ${#b} ]; then
            if [ -z "${cksum// }" ]; then 
              cksum="${b}"
            else
              cksum+=",${b}"
            fi
          fi
      done < $logfile
      
      # append checksum if its not empty
      if [ "$err" -ne 1 -a ! -z "${cksum// }" ]; then 
        echo "$pdffile ${cksum// } # $3" >> $testdir/$conf.config
      else
        echo "# $3 skip " >> $testdir/$conf.config
      fi
    else
      echo "parse_checksum: ERROR: $logfile file not found!"
    fi
    return $err
}

# Parameters:
# $1 - input file
runtest()
{
    f=$1
    fname=`basename $f | cut -d'.' -f1` 
    fullname=`basename $f`
    rm -f $fname.cksum
    mkdir -p $outpath/$conf
    logfile=$outpath/$conf/$fname.sh.log
    
    if [ -f "$testdir/$fullname" ]; then
       echo " -- $f found skipping tests!"
       return
    fi

    if [ ! -f $logfile ]; then
      found=$(ls $fname-*.pam.gz 2> /dev/null | wc -l)
      # generate pam if not found, else just checksum
      if [ "$found" -eq 1 ]; then
          echo "-- $f: pam found, just generate checksum"
          ./pdls -e pdf -s $f &> $logfile
      else
          ./pdls -e pdf -O checkpam -o $testdir/$conf/$fname- $f &> $logfile
      fi
    fi
    
    # parse output log for checksum      
    if [ -f "$logfile" ]; then
      filtered=1
      if [ ${#output_filter} -gt 0 ]; then
        filter_file $logfile $output_filter    
        filtered=$?
      fi
      if [ $filtered -eq 1 ]; then
        ln -s $f $testdir/$fullname
        parse_checksum $logfile $fullname $f
      fi
    fi
}

getparam() 
{
  ret=1
  if [ "${1+defined}" ]; then
    ret="$1"
    return 1
  else
    echo "Error: missing argument!"
    return 0
  fi 
}

while [ "${1+defined}" ]; do
    case "$1" in
      -h | --help)
        help $0 0
        ;;
      -v | --verbose)
        verbose="verbose" 
        ;;
      -d | --dir)
        if [ "${2+defined}" ]; then
          dir="$2"
          shift
        else
          echo "Error: source testcase directory!"
          echo "e.g $0 -d /pfv/.firmwaretestcebu/pdf/v1_2"
          exit 0
        fi 
        ;;
      -p | --pdls)
        if [ "${2+defined}" ]; then
          testdir="$2"
          shift
        else
          echo "Error: testdir test directory!"
          echo "e.g $0 -p /bonus/scratch/tanch/pdls/tests"
          exit 0
        fi 
        ;;
      -t | --type)
        if [ "${2+defined}" ]; then
          type="$2"
          shift
        else
          echo "Error: missing document type filter argument!"
          exit 0
        fi 
        ;;
      -s | --search)
        if [ "${2+defined}" ]; then
          input_filter="$2"
          shift
        else
          echo "Error: file search keyword missing!"
          exit 0
        fi
        ;; 
      -f | --filter)
        if [ "${2+defined}" ]; then
          output_filter="$2"
          shift
        else
          echo "Error: output search keyword missing!"
          exit 0
        fi
        ;; 
      -c | --conf)
        if [ "${2+defined}" ]; then
          conf="$2"
          shift
        else
          echo "Error: missing argument!"
          exit 0
        fi
        ;;
      -n | --pages)
        if [ "${2+defined}" ]; then
          pages="$2"
          shift
        else
          echo "Error: missing number of pages to test!"
          exit 0
        fi
        ;;
      --) # End of all options
        break ;;
      -*)
        echo "Error: Unknown option: $1" >&2
        exit 1 ;;
      *)  # No more options
        break ;;
    esac
    shift
done

if [ ! "${testdir+defined}" ]; then
   echo "ERROR: pdls test path (-p option) not specified!"
   exit 0
fi

if [ ! -d "$testdir" ]; then
  echo "ERROR: invalid pdls test path (-p option)!"
  exit 0
fi
    
echo "directory: $dir"
echo "document type: $type"
echo "config: $testdir/$conf.config"
echo "pdls: $testdir"

if [ "${output_filter+defined}" ]; then
  echo "output filter: $output_filter"
fi


#mysql --host=10.194.15.187 --user=tanch --password=tanch tutorial_db << EOF
#insert into files (fname,floc) values('samplefile', 'http://www.site.com/'); << EOF
#quit << EOF

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
mkdir -p $testdir/$conf
for f in `find $dir -type f -name "*.$type"` ; do
  if [ "${input_filter+defined}" ]; then
    filter_file $f $input_filter
    run_test=$?
  fi
  if [ $run_test -eq 1 ]; then
    runtest $f
    #break
  fi
done
IFS=$SAVEIFS 
exit 0



